error[E0599]: the method `traced` exists for enum `Result<(), TracedError>`, but its trait bounds were not satisfied
 --> tests/trybuild/cannot_call_traced_on_traced_result.rs:8:25
  |
8 |     let _error = result.traced();
  |                         ^^^^^^
  |
  = note: the following trait bounds were not satisfied:
          `&Result<(), TracedError<Box<dyn AnyError>>>: AnyError`
          which is required by `&Result<(), TracedError<Box<dyn AnyError>>>: Traced<TracedError<&Result<(), TracedError<Box<dyn AnyError>>>>>`
          `&mut Result<(), TracedError>: AnyError`
          which is required by `&mut Result<(), TracedError>: Traced<TracedError<&mut Result<(), TracedError>>>`
note: the method `traced` exists on the type `TracedError`
 --> src/generic_error.rs
  |
  |     fn traced(self) -> O1;
  |     ^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `TracedError` value, panicking if the value is a `Result::Err`
  |
8 |     let _error = result.expect("REASON").traced();
  |                        +++++++++++++++++
